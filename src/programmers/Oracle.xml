<?xml version="1.0" encoding="UTF-8"?>

<!-- 보호소의 동물이 중성화되었는지 아닌지 파악하려 합니다.  -->
<!-- 중성화된 동물은 SEX_UPON_INTAKE 컬럼에 'Neutered' 또는 'Spayed'라는 단어가 들어있습니다. 동물의 아이디와 이름,  -->
<!-- 중성화 여부를 아이디 순으로 조회하는 SQL문을 작성해주세요. 이때 중성화가 되어있다면 'O', 아니라면 'X'라고 표시해주세요. -->

<!-- 예시 -->
<!-- 예를 들어 ANIMAL_INS 테이블이 다음과 같다면 -->

<!-- ANIMAL_ID	ANIMAL_TYPE		DATETIME			INTAKE_CONDITION		NAME		SEX_UPON_INTAKE -->
<!-- A355753		Dog			2015-09-10 13:14:00		Normal				Elijah		Neutered Male -->
<!-- A373219		Cat			2014-07-29 11:43:00		Normal				Ella		Spayed Female -->
<!-- A382192		Dog			2015-03-13 13:14:00		Normal				Maxwell 2	Intact Male -->
<!-- 중성화한 동물: Elijah, Ella -->
<!-- 중성화하지 않은 동물: Maxwell 2 -->
<!-- 따라서 SQL문을 실행하면 다음과 같이 나와야 합니다. -->

<!-- ANIMAL_ID		NAME			중성화 -->
<!-- A355753			Elijah			O -->
<!-- A373219			Ella			O -->
<!-- A382192			Maxwell 2		X -->

<select>
SELECT ANIMAL_ID,NAME,CASE
WHEN SEX_UPON_INTAKE LIKE '%Neutered%' THEN 'O'
WHEN SEX_UPON_INTAKE LIKE '%Spayed%' THEN 'O'
ELSE 'X'
END AS 중성화
FROM ANIMAL_INS
ORDER BY ANIMAL_ID
</select>

<!-- 보호소에 돌아가신 할머니가 기르던 개를 찾는 사람이 찾아왔습니다. 
이 사람이 말하길 할머니가 기르던 개는 이름에 'el'이 들어간다고 합니다. 
동물 보호소에 들어온 동물 이름 중, 이름에 "EL"이 들어가는 개의 아이디와 이름을 조회하는 SQL문을 작성해주세요. 
이때 결과는 이름 순으로 조회해주세요. 단, 이름의 대소문자는 구분하지 않습니다. -->

<select>
SELECT ANIMAL_ID,NAME 
FROM ANIMAL_INS 
WHERE UPPER(NAME) LIKE '%EL%' AND ANIMAL_TYPE='Dog' 
ORDER BY NAME
</select>

<!-- /////////////////Oracle day35 -->
<!-- ANIMAL_OUTS 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다.
보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다. 09:00부터 19:59까지, 
각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요. 이때 결과는 시간대 순으로 정렬해야 합니다.

SQL문을 실행하면 다음과 같이 나와야 합니다.

HOUR	COUNT
9		1
10		2
11		13
12		10
13		14
14		9
15		7
16		10
17		12
18		16
19		2 -->

<select>
SELECT TO_CHAR(DATETIME,'HH24') AS HOUR,COUNT(TO_CHAR(DATETIME,'HH24')) AS COUNT 
FROM ANIMAL_OUTS GROUP BY TO_CHAR(DATETIME,'HH24')
<![CDATA[
HAVING TO_CHAR(DATETIME,'HH24')>=9 AND TO_CHAR(DATETIME,'HH24')<20
]]>
ORDER BY HOUR
</select>

<!-- 동물 보호소에 들어온 동물의 이름은 몇 개인지 조회하는 SQL 문을 작성해주세요. 이때 이름이 NULL인 경우는 집계하지 않으며 중복되는 이름은 하나로 칩니다. -->

<select>
SELECT COUNT(DISTINCT(NAME)) AS COUNT FROM ANIMAL_INS WHERE NAME IS NOT NULL
</select>

<!-- 동물 보호소에 들어온 동물 이름 중 두 번 이상 쓰인 이름과 해당 이름이 쓰인 횟수를 조회하는 SQL문을 작성해주세요. 
이때 결과는 이름이 없는 동물은 집계에서 제외하며, 결과는 이름 순으로 조회해주세요. -->
<select>
SELECT NAME,COUNT(NAME) AS COUNT 
FROM ANIMAL_INS GROUP BY NAME 
HAVING COUNT(NAME)>1 
ORDER BY NAME
</select>

<!-- ANIMAL_OUTS 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다. 
ANIMAL_OUTS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, NAME, SEX_UPON_OUTCOME는 각각
동물의 아이디, 생물 종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다. 
ANIMAL_OUTS 테이블의 ANIMAL_ID는 ANIMAL_INS의 ANIMAL_ID의 외래 키입니다.

관리자의 실수로 일부 동물의 입양일이 잘못 입력되었습니다. 
보호 시작일보다 입양일이 더 빠른 동물의 아이디와 이름을 조회하는 SQL문을 작성해주세요. 
이때 결과는 보호 시작일이 빠른 순으로 조회해야합니다. -->

<select>
SELECT ANIMAL_INS.ANIMAL_ID,ANIMAL_INS.NAME FROM ANIMAL_INS INNER JOIN ANIMAL_OUTS
ON ANIMAL_INS.ANIMAL_ID = ANIMAL_OUTS.ANIMAL_ID
<![CDATA[
WHERE ANIMAL_INS.DATETIME > ANIMAL_OUTS.DATETIME
]]>
ORDER BY ANIMAL_INS.DATETIME
</select>


<!-- 천재지변으로 인해 일부 데이터가 유실되었습니다. 
입양을 간 기록은 있는데, 보호소에 들어온 기록이 없는 동물의 ID와 이름을 ID 순으로 조회하는 SQL문을 작성해주세요. -->

<select>
SELECT ANIMAL_ID,NAME FROM ANIMAL_OUTS
WHERE ANIMAL_OUTS.ANIMAL_ID NOT IN(SELECT ANIMAL_ID FROM ANIMAL_INS)
ORDER BY ANIMAL_ID
</select>


<!-- 아직 입양을 못 간 동물 중, 가장 오래 보호소에 있었던 동물 3마리의 이름과 보호 시작일을 조회하는 SQL문을 작성해주세요. 
이때 결과는 보호 시작일 순으로 조회해야 합니다. -->
<select>
SELECT NAME,DATETIME 
FROM(
SELECT * FROM ANIMAL_INS
WHERE ANIMAL_ID NOT IN (SELECT ANIMAL_ID FROM ANIMAL_OUTS)
ORDER BY DATETIME
)
<![CDATA[
WHERE ROWNUM<4
]]>
</select>